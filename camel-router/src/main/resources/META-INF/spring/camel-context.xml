<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd          http://camel.apache.org/schema/spring           http://camel.apache.org/schema/spring/camel-spring.xsd">
    <!-- ActiveMQ Connection -->
<!--     <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="activemq"> -->
<!--         <property name="brokerURL" value="tcp://localhost:61616"/> -->
<!--         <property name="userName" value="admin"/> -->
<!--         <property name="password" value="admin"/> -->
<!--     </bean> -->
    
    
    <!-- setup JMS connection factory -->
	<bean id="poolConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start" destroy-method="stop">
	    <property name="maxConnections" value="8"/>
	    <property name="connectionFactory" ref="jmsConnectionFactory"/>
	</bean>
	 
	<bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
	    <property name="brokerURL" value="tcp://localhost:61616"/>
		<property name="userName" value="admin"/>
        <property name="password" value="admin"/>
	</bean>
	 
	<!-- setup spring jms TX manager -->
	<bean id="jmsTransactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
	    <property name="connectionFactory" ref="poolConnectionFactory"/>
	</bean>
	 
	<!-- define our activemq component -->
	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
	    <property name="connectionFactory" ref="poolConnectionFactory"/>
	    <!-- define the jms consumer/producer as transacted -->
	    <property name="transacted" value="true"/>
	    <!-- setup the transaction manager to use -->
	    <!-- if not provided then Camel will automatic use a JmsTransactionManager, however if you
	         for instance use a JTA transaction manager then you must configure it -->
	    <property name="transactionManager" ref="jmsTransactionManager"/>
	</bean>
    
    <!-- Embedded in-memory DB to demonstrate JDBC -->
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dataSource">
        <property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver"/>
        <property name="url" value="jdbc:derby:memory:contacts;create=true"/>
        <property name="username" value=""/>
        <property name="password" value=""/>
    </bean>
    <bean class="org.apache.camel.component.sql.SqlComponent" id="sql">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- bean which creates/destroys the database table for this example -->
    <bean class="org.jboss.fuse.examples.jdbc.DatabaseBean"
        destroy-method="destroy" id="initDatabase" init-method="create">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean
        class="org.jboss.fuse.examples.aggregate.DBAggregationStrategy" id="aggregationStrategy"/>
    <camelContext id="camel-router" trace="false" xmlns="http://camel.apache.org/schema/spring">
     	<propertyPlaceholder id="properties" location="env.properties"/>
        <endpoint id="RemoveOrderDetails" uri="dozer:RemoveOrderDetails?sourceModel=generated.Order&amp;targetModel=generated.Order&amp;marshalId=generated&amp;unmarshalId=generated&amp;mappingFile=transformation.xml"/>
        <dataFormats>
            <jaxb contextPath="generated" id="generated"/>
        </dataFormats>
    	<redeliveryPolicyProfile id="HTTPRedeliveryProfile" redeliveryDelay="{{http.retryWaitTime}}" maximumRedeliveries="{{http.connectionRetry}}" retryAttemptedLogLevel="WARN"/>

        <onException id="_onException1" useOriginalMessage="true">
            <exception>org.apache.camel.ValidationException</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log id="_log3" message="Incoming order XML is invalid.  Error is ${exception.message}. Message contents: ${body}"/>
            <setHeader headerName="errorMessage" id="_setHeader2">
                <simple>${exception.message}</simple>
            </setHeader>
            <to id="_to4" uri="activemq:error.order"/>
        </onException>
        
        <route id="consume-rnw">
            <!-- Content Based Enrichment -->
            <from id="_from1" uri="activemq:OrderAckToRNW"/>
			<transacted/>
			<onException redeliveryPolicyRef="HTTPRedeliveryProfile">
                <exception>org.apache.camel.ExchangeTimedOutException</exception>
                <exception>java.net.ConnectException</exception>
                <exception>org.apache.camel.CamelException</exception>
                <exception>org.apache.http.conn.HttpHostConnectException</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="** HTTP Connection Error for RNW flow" loggingLevel="WARN"/>
                <stop/>
            </onException>    
            
            <setHeader headerName="email" id="_setHeader1">
                <xpath resultType="java.lang.String">/Order/PersonInfoBillTo/@EMailID</xpath>
            </setHeader>
            <convertBodyTo id="_convertBodyTo1" type="java.lang.String"/>
            <enrich id="_enrich1" strategyRef="aggregationStrategy" uri="direct:nameByEmail"/>
            <recipientList>
            	<simple>http4://${properties:http.host}:${properties:http.port}/RNW?httpClient.SocketTimeout=${properties:http.socketTimeout}</simple>
            </recipientList>
        </route>
        <route id="consume-atg">
            <!-- Transformation -->
            <from id="_from2" uri="activemq:OrderAckToATG"/>
			<transacted/>
			<onException redeliveryPolicyRef="HTTPRedeliveryProfile">
                <exception>org.apache.camel.ExchangeTimedOutException</exception>
                <exception>java.net.ConnectException</exception>
                <exception>org.apache.camel.CamelException</exception>
                <exception>org.apache.http.conn.HttpHostConnectException</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="** HTTP Connection Error for ATG flow" loggingLevel="WARN"/>
                <stop/>
            </onException>  
            
            <to id="_to7" uri="ref:RemoveOrderDetails"/>
			<recipientList>
            	<simple>http4://${properties:http.host}:${properties:http.port}/ATG?httpClient.SocketTimeout=${properties:http.socketTimeout}</simple>
            </recipientList>
        </route>
        <route id="consume-payment">
            <!-- Validation -->
            <from id="_from3" uri="activemq:OrderAckToPayment"/>
        	<transacted/>            
			<onException redeliveryPolicyRef="HTTPRedeliveryProfile">
                <exception>org.apache.camel.ExchangeTimedOutException</exception>
                <exception>java.net.ConnectException</exception>
                <exception>org.apache.camel.CamelException</exception>
                <exception>org.apache.http.conn.HttpHostConnectException</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="** HTTP Connection Error for Payment flow" loggingLevel="WARN"/>
                <stop/>
            </onException>  
            
            <to id="_to3" uri="validator:order.xsd"/>
			<recipientList>
            	<simple>http4://${properties:http.host}:${properties:http.port}/Payment?httpClient.SocketTimeout=${properties:http.socketTimeout}</simple>
            </recipientList>
        </route>
        <route id="populateDB" startupOrder="1">
            <from id="_from4" uri="file:src/data/db?noop=true"/>
            <unmarshal id="_unmarshal1">
                <csv/>
            </unmarshal>
            <split id="_split1">
                <simple>${body}</simple>
                <to id="_to5" uri="sql:insert INTO CONTACTS (contact_id, contact_firstname, contact_lastname, contact_email, contact_phone) VALUES (next value FOR contact_id,#,#,#,# )"/>
            </split>
            <log id="_log1" message="Updated CONTACTS database."/>
        </route>
        <route id="nameByEmail">
            <from id="_from5" uri="direct:nameByEmail"/>
            <to id="_to6" uri="sql:select contact_firstname, contact_lastname from CONTACTS where contact_email=:#email"/>
        </route>
    </camelContext>
</beans>
